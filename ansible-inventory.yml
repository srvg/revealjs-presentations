---
header:
  author: Serge van Ginderachter
  title: Introduction to the ansible inventory
  description: How does Ansible model its inventory data and how can we use it?

slides:

   -
     - h2: Introduction to the ansible inventory
     - h5: How does Ansible model its inventory and how can we model our infrastructure?

   -
     - h3: $ whoami
     - ul:
       - Serge van Ginderachter - @svg
       - www.ginsys.eu - serge@ginsys.eu
       - svg on Freenode
     - image:       'images/ginsys_def_Logo neg liggend bw.jpg'

   -
     - h3: $WORK
     - h3: "Infrastructure \"consultant\""
     - ul:
       - "Serge van Ginderachter"
       - "Ansible user and contributor since 2012 "
       - github.com/srvg
       - github.com/ginsys
     - code: |
           commit da92ce796b48ec80e3ead1cfe9bcbc71f5fce805
           Author Serge van Ginderachter
           Date   Wed Oct 10 19:38:30 2012 +0200

             fix missing --limit in docssite examples

   -
     - h3: Ansible Inventory
     - p: How can this thing be implemented?
     - code: |
        ~/src/ansible/lib/ansible$ ls inventory/
        dir.py
        expand_hosts.py
        group.py
        host.py
        ini.py
        __init__.py
        script.py
        vars_plugins

   -
     - h3: ansible.inventory
     - code: |
           96         elif os.path.exists(host_list):
           97             if os.path.isdir(host_list):
           98                 # Ensure basedir is inside the directory
           99                 self.host_list = os.path.join(self.host_list, "")
           100                 self.parser = InventoryDirectory(filename=host_list)
           101                 self.groups = self.parser.groups.values()
           102             elif utils.is_executable(host_list):
           103                 self.parser = InventoryScript(filename=host_list)
           104                 self.groups = self.parser.groups.values()
           105             else:
           106                 self.parser = InventoryParser(filename=host_list)
           107                 self.groups = self.parser.groups.values()
           108
           109             utils.plugins.vars_loader.add_directory(self.basedir(), with_subdir=True)


   -
     - h3: ansible.inventory.dir
     - code: |
           58             if os.path.isdir(fullpath):
           59                 parser = InventoryDirectory(filename=fullpath)
           60             elif utils.is_executable(fullpath):
           61                 parser = InventoryScript(filename=fullpath)
           62             else:
           63                 parser = InventoryParser(filename=fullpath)
           64             self.parsers.append(parser)


   -
     - h3: ~/src/ansible/examples/hosts
     - code: |
         # This is the default ansible 'hosts' file.

         # Ungrouped hosts, specify before any group headers.
         green.example.com
         blue.example.com
         192.168.100.1
         192.168.100.10

         # A collection of hosts belonging to the 'webservers' group
         [webservers_A]
         alpha.example.org
         beta.example.org

         [webservers_B]
         192.168.1.100
         192.168.1.110

         # A collection of database servers in the 'dbservers' group
         [dbservers]

         db01.intranet.mydomain.net
         db02.intranet.mydomain.net
         10.25.1.56
         10.25.1.57

         # groups can have child groups, too
         [webservers:children]
         webservers_A
         webservers_B

   -
     - h3: Dynamic inventory scripts
     - code: |
            {
                "databases"   : {
                    "hosts"   : [ "host1.example.com", "host2.example.com" ],
                    "vars"    : {
                        "a"   : true
                    }
                },
                "webservers"  : [ "host2.example.com", "host3.example.com" ],
                "atlanta"     : {
                    "hosts"   : [ "host1.example.com", "host4.example.com", "host5.example.com" ],
                    "vars"    : {
                        "b"   : false
                    },
                    "children": [ "marietta", "5points" ],
                },

                "marietta"    : [ "host6.example.com" ],
                "5points"     : [ "host7.example.com" ]

                "_meta" : {
                   "hostvars" : {
                      "moocow.example.com"     : { "asdf" : 1234 },
                      "llama.example.com"      : { "asdf" : 5678 },
                   }
                }
            }


   -
     - h3: The Ansible inventory is not a tree!
     - code: |
        google
        google/gcalendar
        google/gcalendar/backend
        google/gcalendar/backend/storage1
        google/gcalendar/backend/storage2
        google/gcalendar/backend/storage3
        google/gcalendar/frontend
        google/gcalendar/frontend/web1
        google/gcalendar/frontend/web2
        google/gcalendar/frontend/web3
        google/gdrive
        google/gdrive/backend
        google/gdrive/backend/storage1
        google/gdrive/backend/storage2
        google/gdrive/backend/storage3
        google/gdrive/frontend
        google/gdrive/frontend/web1
        google/gdrive/frontend/web2
        google/gdrive/frontend/web3
        google/gmail
        google/gmail/backend
        google/gmail/backend/storage1
        google/gmail/backend/storage2
        google/gmail/backend/storage3
        google/gmail/frontend
        google/gmail/frontend/web1
        google/gmail/frontend/web2
        google/gmail/frontend/web3

   -
     - h3: Nodes can live in different groups on different levels
     - code: |
        google/nginx
        google/nginx/web1
        google/nginx/web2
        google/nginx/web3
        google/tomcat
        google/tomcat/storage1
        google/tomcat/storage2
        google/tomcat/storage3


   -
     - h3: internal Ansible inventory model
     - code: |
         web1:
           groups:
            - all
            - google
            - gcalendar
            - gdrive
            - gmail
            - frontend
         storage2:
            groups:
            - all
            - google
            - gcalendar
            - gdrive
            - gmail
            - backend

   -
     - h3: internal Ansible inventory model - 2
     - code: |
         web1:
           groups:
                - groupname: all
                  depth: 0
                - groupname: google
                  depth: 1
                - groupname: gcalendar
                  depth: 2
                - groupname: gdrive
                  depth: 2
                - groupname: gmail
                  depth: 2
                - groupname: frontend
                  depth: 3
   -
     - h3: internal Ansible inventory model - 3
     - code: |
         storage2:
           groups:
                - groupname: all
                  depth: 0
                - groupname: google
                  depth: 1
                - groupname: gcalendar
                  depth: 2
                - groupname: gdrive
                  depth: 2
                - groupname: gmail
                  depth: 2
                - groupname: frontend
                  depth: 3

   -
     - h3: How about Inventory variable precedence?
     - ul:
        - 'Ansible docs are very succinct on how inventory variables precede each other'
        - 'Because As all things Ansible, KEEP IT SIMPLE, they say.'

     - quote: "There is only one Empire State Building. One Mona Lisa, etc. Figure out where to define a variable, and do not make it complicated."
     - quote: "Remember: Child groups override parent groups, and hosts always override their groups."

   -
     - h3: So ansible inventory is not a tree
     - h3: but variables precede in child groups?
     - ul:
       - Child? Parent? Tree?
     - code: |
         35     def add_child_group(self, group):
         40         # do not add if it is already there
         41         if not group in self.child_groups:
         42             self.child_groups.append(group)
         43             group.depth = max([self.depth+1, group.depth])
         44             group.parent_groups.append(self)
         45             self.clear_hosts_cache()
     - ul:
       - When we encounter a child group, then "depth" gets a level deeper; the deeper the child the more precedence
       - That *is* some kind of a tree, no?

   -
       - h3: Current project
       - ul:
            - 80% of all virtual machines are tomcat hosts based on ONE ROLE
            - every tomcat app is a two node "cluster" behind a loadbalancer
            - applications are part of a project, a project is part of an organisation
            - every application has three instances in each environment
            - ontwikkel - oefen - productie

   -
      - h3: inventory organisation
      - code: |
            all inventory
            |_ organisation 1
               |_ project 1
                  |_ application 1
                     |_ dev
                        |_ node 1
                        |_ node 2
                     |_ test
                        |_ ..
                     |_ prod
                        |_ ..
                  |_ application 2
                        |_ ..
               |_ project 2
                  |_ ..
            |_ organisation 1
               |_ ..

   -
     - h3: "other group trees (we have different tree's!)"
     - code: |
           |_ development
              |_ organisation1-dev
                 |_application1-dev
           |_ testing
           |_ production
     - h6: or also
     - code: |
           tomcat
           |_ application1
           |_ application2
           drupal
           |_ application7
           |_ application9
     - p: lowest groups with nodes are at different levels in different tree's

   -
     - h3: "Example: a set of reverse proxies:"
     - code: |
                all(0)
                . infra(1)
                .. rp(2)
                ... rp-vonet-oe(3)
                ... rp-vonet-on(3)
                ... rp-vonet-pr(3)
                ... rp-innet-oe(3)
                ... rp-innet-on(3)
                ... rp-innet-pr(3)
                .. rp-vonet(2)
                ... rp-vonet-on(3)
                ... rp-vonet-oe(3)
                ... rp-vonet-pr(3)
                .. rp-innet(2)
                ... rp-innet-on(3)
                ... rp-innet-oe(3)
                ... rp-innet-pr(3)

   -
     - h3: Managing inventory data
     - p: updating software versions of applications in different stacks, in different environments
     - ul:
        - update default java version for all dev servers?
        - defaults can be dangerous!!
        - ini hosts file and host/group_vars don't scale well
        - a more advanced inventory that let's you inherit defaults, but then remember them for particular setup

   -
     - h1: Q/A ?
     - image: 'images/ginsys_def_Logo pos.png'

   -
     - h1: Thanks!
     - image: 'images/ginsys_def_logotype pos.png'
     - quote: https://github.com/srvg/revealjs-presentations/tree/ansible-utrecht-meetup-150227

